{"version":3,"sources":["Footer.js","Todo.js","TodoForm.js","App.js","serviceWorker.js","webpack:///./src/index.js?b635"],"names":["Footer","className","href","Todo","todo","index","completeTodo","removeTodo","editTodo","onClick","style","textDecoration","isCompleted","text","event","stopPropagation","TodoForm","addTodo","useState","value","setValue","error","setError","onSubmit","e","preventDefault","type","placeholder","onChange","target","App","todos","setTodos","JSON","parse","localStorage","getItem","darkMode","setDarkMode","useEffect","setItem","stringify","newTodos","splice","updateTodo","prompt","length","checked","size","speed","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.047ad3ed.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function Footer() {\n    return (\n        <div className=\"footer\">\n            <a href=\"https://github.com/imkrantiprasad/react-hook-todo\">GitHub link</a>\n            <br />\n            Made with <span className=\"heart\">&hearts;</span> by <a href=\"https://www.linkedin.com/in/kranti-prasad-690034131/\">Kranti</a>\n        </div>\n    );\n}","import React from 'react';\r\n\r\nexport default function Todo({ todo, index, completeTodo, removeTodo, editTodo }) {\r\n    return (\r\n        <div onClick={() => completeTodo(index)}\r\n            className=\"todo\"\r\n            style={{ textDecoration: todo.isCompleted ? \"line-through\" : \"\" }}\r\n        >\r\n            {todo.text}\r\n\r\n            <div>\r\n                <button className=\"btn edit-btn\" onClick={(event) => { event.stopPropagation(); editTodo(index) }}>Edit </button>\r\n                <button className=\"btn delete-btn\" onClick={(event) => { event.stopPropagation(); removeTodo(index) }}>x</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React, { useState } from 'react';\n\nexport default function TodoForm({ addTodo }) {\n    const [value, setValue] = useState(\"\");\n    const [error, setError] = useState(\"\");\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        if (!value){ \n            setError(\"Please enter a Todo\")  \n            return;}\n        addTodo(value);\n        setValue(\"\");\n    };\n\n    const handleChange = e => {\n      if(error) setError(\"\")\n      setValue(e.target.value)\n    }\n\n    return (\n        <div>\n            <form onSubmit={handleSubmit}>\n                <input\n                    type=\"text\"\n                    className=\"input\"\n                    placeholder=\"Enter a Todo\"\n                    value={value}\n                    onChange={handleChange}\n                />\n                {error && <div className=\"error-message\">{error}</div>}\n            </form>\n        </div>\n    );\n}","import React, { useEffect, useState } from 'react';\r\nimport './App.css';\r\nimport Footer from './Footer';\r\nimport Todo from './Todo';\r\nimport TodoForm from './TodoForm';\r\nimport DarkModeToggle from \"react-dark-mode-toggle\";\r\n\r\nfunction App() {\r\n  const [todos, setTodos] = useState([\r\n    {\r\n      text: \"Learn firebase\",\r\n      isCompleted: false\r\n    },\r\n    {\r\n      text: \"Walk in evening\",\r\n      isCompleted: false\r\n    },\r\n    {\r\n      text: \"Class assignment\",\r\n      isCompleted: false\r\n    }\r\n  ]);\r\n\r\n  const [darkMode, setDarkMode] = useState(getInitialMode());\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"dark\", JSON.stringify(darkMode));\r\n  }, [darkMode]);\r\n\r\n  function getInitialMode() {\r\n    const savedMode = JSON.parse(localStorage.getItem(\"dark\"));\r\n    return savedMode || false;\r\n  }\r\n\r\n  const addTodo = text => {\r\n    const newTodos = [...todos, { text }];\r\n    setTodos(newTodos);\r\n  };\r\n\r\n  const completeTodo = index => {\r\n    const newTodos = [...todos];\r\n    newTodos[index].isCompleted = !newTodos[index].isCompleted;\r\n    setTodos(newTodos);\r\n  };\r\n\r\n  const removeTodo = index => {\r\n    const newTodos = [...todos];\r\n    newTodos.splice(index, 1);\r\n    setTodos(newTodos);\r\n  };\r\n\r\n  const editTodo = index => {\r\n    let newTodos = [...todos]\r\n    let updateTodo = prompt(\"Update your todo\", newTodos[index].text)\r\n    if (updateTodo.length > 0) {\r\n      newTodos[index].text = updateTodo\r\n      setTodos(newTodos)\r\n    } else return;\r\n  }\r\n\r\n\r\n  return (\r\n    <div className={darkMode ? \"app dark-mode\" : \"app light-mode\"} >\r\n      <div className=\"heading\">\r\n        Kranti's Todo App.\r\n    </div>\r\n      <DarkModeToggle\r\n        onChange={() => setDarkMode(!darkMode)}\r\n        checked={darkMode}\r\n        size={60}\r\n        speed={3}\r\n      />\r\n      <div className=\"todo-list\">\r\n        {todos.map((todo, index) => (\r\n          <Todo\r\n            key={index}\r\n            index={index}\r\n            todo={todo}\r\n            completeTodo={completeTodo}\r\n            removeTodo={removeTodo}\r\n            editTodo={editTodo}\r\n          />\r\n        ))}\r\n        <TodoForm addTodo={addTodo} />\r\n      </div>\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}